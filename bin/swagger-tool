#!/usr/bin/env node
const yargs = require('yargs')
const path = require('path')
const { version } = require('../package.json')
const { SwaggerTool, ConfigOptions } = require('../build/main.js')

const argv = yargs
    .usage('Usage: swagger-tool -c [swagger.conf.js] -m [module name] -e [entity name]')
    .help('help').alias('help', 'h')
    .version('version', version).alias('version', 'v')
    .option('module', {
        alias: 'm',
        type: 'string',
        describe: '需要创建或同步的模块',
    })
    .option('entity', {
        alias: 'e',
        type: 'string',
        describe: '需要创建或同步的 API 实体',
    })
    .option('site', {
        alias: 's',
        type: 'string',
        describe: 'API URL, 不包含 path 部分',
        example: ConfigOptions.siteExample
    })
    .option('path', {
        alias: 'p',
        type: 'string',
        describe: 'API URL, path 部分',
        example: ConfigOptions.pathExample
    })
    .option('docJSONPath', {
        type: 'string',
        describe: 'API 文档保存路径',
        default: ConfigOptions.defaultDocJSONPath
    })
    .option('docPath', {
        type: 'string',
        describe: 'API dos.json 路径',
        default: ConfigOptions.defaultDocPath
    })
    .option('modelDir', {
        type: 'string',
        describe: '本地项目中的 model 类存放目录',
        default: ConfigOptions.defaultModelDir
    })
    .option('config', {
        alias: 'c',
        default: ConfigOptions.defaultConfigPath,
        type: 'string',
        required: true,
        describe: '脚本配置文件, 详见 README.md'
    })
    .example('swagger-tool', '使用默认配置 并下载 `doc.json` 文件, 可交互式选择更新的模块')
    .example('swagger-tool --download', '使用默认配置 并仅下载 `doc.json` 文件')
    .example('swagger-tool -c conf.js', '使用指定配置文件 并下载 `doc.json` 文件, 可交互式选择更新的模块')
    .example('swagger-tool -m User -e commoditys.Commodity', '下载 `doc.json` 文件 并 更新指定的实体数据')
    .argv

const main = async () => {
    const options = new ConfigOptions({
        site: argv.site,
        path: argv.path,
        docJSONPath: argv.docJSONPath,
        docPath: argv.docPath,
        modelDir: argv.modelDir,
    })
    const tool = new SwaggerTool(path.join(process.cwd(), argv.config), argv.module, argv.entity, options)
    await tool.run()
    console.log('--------  done  --------')
}

main()